pragma language_version >= 0.17;

import CompactStandardLibrary;

// fire/ice can go past block
// physical doesn't
// you can either be neutral (fire/ice do normal damage) or you can have higher/lower resistances to them
// do we want them to all be 1 to 10 or just {weak fire, strong ice}/{balanced}/{strong fire, weak ice}?

export enum EFFECT_TYPE {
    attack_phys,
    attack_fire,
    attack_ice,
    block,
}

// a note on attack base damage:
// damage is subject to resistances in EnemyStats and can be up to 10 times higher (when the enemy has no resistance)
// TODO: how to handle this in the UI? Multiply by 10? or 5 to get 'average' with >5 being 'resistance' and <5 being 'weakness'?
export struct Effect {
    effect_type: EFFECT_TYPE,
    amount: Uint<32>,
    is_aoe: Boolean,
}

export struct Ability {
    effect: Maybe<Effect>,
    // effects triggered by energy generation. one energy triggers all corresponding effects of all abilities
    on_energy: Vector<3, Maybe<Effect>>,
    // which type of energy to generate
    generate_color: Maybe<Uint<0..2>>,
}

export enum BOSS_TYPE {
    normal,
    miniboss,
    boss,
}

export struct EnemyStats {
    boss_type: BOSS_TYPE,
    /// Visual indication of what the enemy should be
    enemy_type: Uint<32>,
    hp: Uint<32>,
    // TODO: do we need a more complicated system or is this okay?
    attack: Uint<32>,
    block: Uint<32>,
    physical_def: Uint<32>,
    fire_def: Uint<32>,
    ice_def: Uint<32>,
}

// index by ability id
export sealed ledger all_abilities: Map<Field, Ability>;

export pure circuit derive_ability_id(ability: Ability): Field {
    return transientCommit<Ability>(ability, 30);
}

// helper function for creating abilities. returns the ability id
circuit register_ability(ability: Ability): Field {
    const id = derive_ability_id(ability);
    all_abilities.insert(id, ability);
    return id;
}

// base abilities given at the start
export sealed ledger ability_base_phys_id: Field;
export sealed ledger ability_base_block_id: Field;
export sealed ledger ability_base_fire_aoe_id: Field;
export sealed ledger ability_base_ice_id: Field;

// used only by JS impl. TODO: remove or make JS and contract match once byte indexing works
export pure circuit hashUtil(nonce1: Bytes<32>, nonce2: Field): Field {
    return transientCommit<Bytes<32>>(nonce1, nonce2);
}

// used only by JS impl. TODO: remove or make JS and contract match once byte indexing works
export pure circuit fakeTempRng(state: BattleState, config: BattleConfig): Bytes<32> {
    return persistentCommit<BattleState>(state, persistentHash<BattleConfig>(config));
}

// ranks how "good" an ability is. higher is better. useful for ordering in the UI
export pure circuit ability_score(ability: Ability): Uint<32> {
    return ((3 * effect_score(ability.effect) + effect_score(ability.on_energy[0]) + effect_score(ability.on_energy[1]) + effect_score(ability.on_energy[2])) * (2 + (ability.generate_color.is_some as Uint<1>))) as Uint<32>;
}

// ranks how "good" an effect is. higher is better
pure circuit effect_score(effect: Maybe<Effect>): Uint<32> {
    const aoe = (1 + (effect.value.is_aoe as Uint<1>));
    const attack_compensate = (1 + 4 * ((effect.value.effect_type == EFFECT_TYPE.attack_phys || effect.value.effect_type == EFFECT_TYPE.attack_ice || effect.value.effect_type == EFFECT_TYPE.attack_fire) as Uint<1>));
    return ((effect.is_some as Uint<1>) * (effect.value.amount * aoe * attack_compensate)) as Uint<32>;
}

// starting 4 abilities
export pure circuit ability_base_phys(): Ability {
    return Ability {
        some<Effect>(Effect {
            EFFECT_TYPE.attack_phys,
            2,
            false
        }),
        [none<Effect>(), none<Effect>(), none<Effect>()],
        none<Uint<0..2>>()
    };
}

export pure circuit ability_base_block(): Ability {
    return Ability {
        some<Effect>(Effect {
            EFFECT_TYPE.block,
            10,
            false
        }),
        [none<Effect>(), none<Effect>(), none<Effect>()],
        none<Uint<0..2>>()
    };
}

export pure circuit ability_base_fire_aoe(): Ability {
    return Ability {
        some<Effect>(Effect {
            EFFECT_TYPE.attack_fire,
            2,
            true
        }),
        [none<Effect>(), none<Effect>(), none<Effect>()],
        none<Uint<0..2>>()
    };
}

export pure circuit ability_base_ice(): Ability {
    return Ability {
        some<Effect>(Effect {
            EFFECT_TYPE.attack_ice,
            4,
            false
        }),
        [none<Effect>(), none<Effect>(), none<Effect>()],
        none<Uint<0..2>>()
    };
}

constructor() {
    ability_base_phys_id = register_ability(ability_base_phys());
    ability_base_block_id = register_ability(ability_base_block());
    ability_base_fire_aoe_id = register_ability(ability_base_fire_aoe());
    ability_base_ice_id = register_ability(ability_base_ice());
    players.resetToDefault();
}

// used to compute player ID. secret witness only known to the player.
witness player_secret_key(): Bytes<32>;

// compute player ID from the secret bytes (player_secret_key())
export pure circuit derive_player_pub_key(sk: Bytes<32>): Field {
    return transientCommit<Bytes<32>>(sk, 1024);
}

ledger rand_hack: Uint<32>;
// TODO: remove once byte indexing is implemented. just cycles targets for now
circuit mock_rand_target(): Uint<0..3> {
    rand_hack = (rand_hack + 1) as Uint<32>;
    if (rand_hack > 2) {
        rand_hack = 0;
    }
    return rand_hack as Uint<0..3>;
}

// indexed by user ID then by battle ID (TODO: look up proof invalidation - are other players insulated from this by first indexing by user ID?)

// index by battle id
export ledger active_battle_states: Map<Field, BattleState>;
// index by battle id
export ledger active_battle_configs: Map<Field, BattleConfig>;

// index by quest id
export ledger quests: Map<Field, QuestConfig>;

export struct Player {
    gold: Uint<32>,
    // TODO: more
}

// registered players. Key is Player ID
export ledger players: Map<Field, Player>;

// player id -> { ability id -> amount player has } (TODO: modified when sent to battle / quests? or should we only allow battling when not questing?)
// this isn't a part of Player as you can't sore Map/List/etc ledger types inside a regular compact type
export ledger player_abilities: Map<Field, Map<Field, Uint<32>>>;

export struct QuestConfig {
    battle_config: BattleConfig,
    difficulty: Field,
}

export struct BattleRewards {
    alive: Boolean;
    gold: Uint<32>;
    // reward ability that has been added to the player's available abilities
    ability: Maybe<Field>;
    // what else?
}

export struct BattleConfig {
    // this is not an enum to allow for updating the game without the contract changing. TODO: look into signature verification
    biome: Uint<32>,
    stats: Vector<3, EnemyStats>,
    enemy_count: Uint<0..3>,
    player_pub_key: Field,
    loadout: PlayerLoadout,
}

export pure circuit derive_battle_id(battle: BattleConfig): Field {
    // TODO: swap to persistent?
    return transientCommit<BattleConfig>(battle, 0);
}

export pure circuit derive_quest_id(quest: QuestConfig): Field {
    // TODO: swap to persistent?
    return transientCommit<QuestConfig>(quest, 0);
}

export struct BattleState {
    deck_indices: Vector<3, Uint<32>>;
    player_hp: Uint<32>;
    enemy_hp_0: Uint<32>;
    enemy_hp_1: Uint<32>;
    enemy_hp_2: Uint<32>;
}

export struct PlayerLoadout {
    abilities: Vector<7, Field>,
}

// export pure circuit derive_loadout_id(loadout: PlayerLoadout): Field {
//     // this line adds ~3k to the circuit
//     return transientCommit<PlayerLoadout>(loadout, 100);
//     //return 0 as Field;
// }

export circuit register_new_player(): [] {
    const player_id = derive_player_pub_key(disclose(player_secret_key()));
    players.insert(player_id, Player { 5 });
    player_abilities.insertDefault(player_id);
    player_abilities.lookup(player_id).insert(ability_base_phys_id, 4);
    player_abilities.lookup(player_id).insert(ability_base_block_id, 4);
    player_abilities.lookup(player_id).insert(ability_base_ice_id, 1);
    player_abilities.lookup(player_id).insert(ability_base_fire_aoe_id, 1);
}

// both validates and drops from the player's current available abilities
circuit verify_loadout(loadout: PlayerLoadout): [] {
    const player_id = derive_player_pub_key(disclose(player_secret_key()));
    for (const ability_id of loadout.abilities) {
        const available = player_abilities.lookup(player_id).lookup(ability_id);
        assert(available >= 1, "Invalid loadout");
        player_abilities.lookup(player_id).insert(ability_id, available - 1);
    }
}

// gives player access to all their abilities used in this battle/quest. TODO: do we want to store the currently used ones somewhere?
circuit return_loadout(loadout: PlayerLoadout): [] {
    const player_id = derive_player_pub_key(disclose(player_secret_key()));
    for (const ability_id of loadout.abilities) {
        player_abilities.lookup(player_id).insert(ability_id, (player_abilities.lookup(player_id).lookup(ability_id) + 1) as Uint<32>);
    }
}

export pure circuit ability_value(ability: Ability): Uint<32> {
    const score = ability_score(ability);
    return (score * score + score) as Uint<32>;
}

export circuit sell_ability(ability: Ability): [] {
    const player_id = derive_player_pub_key(disclose(player_secret_key()));
    const ability_id = derive_ability_id(disclose(ability));
    const available = player_abilities.lookup(player_id).lookup(ability_id);
    assert(available >= 1, "Player does not own ability");
    assert(ability_id != ability_base_block_id && ability_id != ability_base_phys_id, "Can't sell base abilities");
    player_abilities.lookup(player_id).insert(ability_id, available - 1);
    players.insert(player_id, Player {
        (players.lookup(player_id).gold + ability_value(disclose(ability))) as Uint<32>
    });
}


pure circuit filler_enemy_stats(): EnemyStats {
    return EnemyStats { BOSS_TYPE.normal, 0, 0, 0, 0, 0, 0, 0 };
}

export circuit start_new_quest(loadout: PlayerLoadout, biome: Uint<32>, difficulty: Field): Field {
    verify_loadout(disclose(loadout));
    // TODO: randomize + take into account difficulty
    const player_pub_key = derive_player_pub_key(disclose(player_secret_key()));
    const battle_config = BattleConfig {
        disclose(biome),
        [
            EnemyStats { BOSS_TYPE.boss, 0, 150, 20, 15, 5, 5, 5 },
            filler_enemy_stats(),
            filler_enemy_stats(),
        ],
        1,
        player_pub_key,
        loadout
    };
    const quest = QuestConfig {
        battle_config,
        disclose(difficulty)
    };
    const quest_id = derive_quest_id(quest);
    quests.insert(disclose(quest_id), disclose(quest));

    return quest_id;
}

circuit random_ability(difficulty: Field): Field {
    // TODO implement once byte indexing is available
    return ability_base_fire_aoe_id;
}

/**
 * Attempt to finalize a quest (enter into the boss battle)
 * 
 * @returns The battle ID of the resulting boss battle, or none if quest not ready yet
 */
export circuit finalize_quest(quest_id: Field): Maybe<Field> {
    const quest = quests.lookup(disclose(quest_id));
    const player_pub_key = derive_player_pub_key(disclose(player_secret_key()));
    
    assert(quest.battle_config.player_pub_key == player_pub_key, "Player auth failed");

    // TODO: check block height here

    const battle_id = derive_battle_id(disclose(quest.battle_config));
    active_battle_states.insert(battle_id, init_battlestate(quest.battle_config));
    active_battle_configs.insert(battle_id, quest.battle_config);

    quests.remove(disclose(quest_id));

    return some<Field>(0);
}

export circuit start_new_battle(loadout: PlayerLoadout, biome: Uint<32>): BattleConfig {
    verify_loadout(disclose(loadout));
    // TODO: randomize
    const player_pub_key = derive_player_pub_key(disclose(player_secret_key()));
    const battle = BattleConfig {
        disclose(biome),
        [
            EnemyStats { BOSS_TYPE.normal, 0, 30, 5, 0, 8, 5, 3 },
            EnemyStats { BOSS_TYPE.normal, 1, 25, 3, 2, 3, 8, 5 },
            EnemyStats { BOSS_TYPE.normal, 2, 15, 4, 4, 5, 3, 8 }
        ],
        3,
        player_pub_key,
        //derive_loadout_id(loadout)
        disclose(loadout)
    };
    const battle_id = derive_battle_id(disclose(battle));
    active_battle_states.insert(disclose(battle_id), init_battlestate(disclose(battle)));
    active_battle_configs.insert(disclose(battle_id), disclose(battle));

    return battle;
}

pure circuit init_battlestate(battle: BattleConfig): BattleState {
    return BattleState {
        // TODO: randomize
        [0, 1, 2],
        100,// TODO: source from somewhere - also do we want multiple people?
        battle.stats[0].hp,
        battle.stats[1].hp,
        battle.stats[2].hp
    };
}

// zk-Circuits can only handle indexing by constants but to handle how deck iteration works
// we need it to be dynamic, so we use this helper function
pure circuit index<T>(array: Vector<7, T>, i: Uint<32>): T {
    if (i == 0) {
        return array[0];
    }
    if (i == 1) {
        return array[1];
    }
    if (i == 2) {
        return array[2];
    }
    if (i == 3) {
        return array[3];
    }
    if (i == 4) {
        return array[4];
    }
    if (i == 5) {
        return array[5];
    }
    return array[6];
}

// pure circuit add_mod<#n>(start: Uint<0..n>, add: Uint<0..n>): Uint<0..n> {
//     if (start + add > n) {
//         return start + add - n;
//     }
//     return start + add;
// }

// computes (start + add) % n, ONLY when start + add < 2n (which for our indices is always true)
pure circuit add_mod(start: Uint<32>, add: Uint<32>, n: Uint<32>): Uint<32> {
    // Due to a bug in Compact the below doesn't work so we work around it with binary arithmetic
    // if (start + add >= n) {
    //     return (start + add - n) as Uint<32>;
    // }
    // return (start + add) as Uint<32>;
    return (start + add - (((start + add >= n) as Uint<1>) * n)) as Uint<32>;
}

export circuit combat_round(battle_id: Field): Maybe<BattleRewards> {
    const player_pub_key = derive_player_pub_key(disclose(player_secret_key()));
    assert(player_pub_key == active_battle_configs.lookup(disclose(battle_id)).player_pub_key, "Player auth failed");
    //assert derive_loadout_id(loadout) == active_battle_configs.lookup(battle_id).player_loadoutCommit "Loadout hash mismatch";
    // TODO: how to cycle through abilities?

    const config = disclose(active_battle_configs.lookup(disclose(battle_id)));
    const loadout = config.loadout;
    const state = disclose(active_battle_states.lookup(disclose(battle_id)));
    const round_abilities = [
        all_abilities.lookup(index<Field>(loadout.abilities, state.deck_indices[0])),
        all_abilities.lookup(index<Field>(loadout.abilities, state.deck_indices[1])),
        all_abilities.lookup(index<Field>(loadout.abilities, state.deck_indices[2])),
    ];
    
    const result = combat_round_impl(disclose(battle_id), round_abilities, mock_rand_target());
    active_battle_states.insert(disclose(battle_id), result);
    if (result.player_hp == 0) {
        active_battle_configs.remove(disclose(battle_id));
        active_battle_states.remove(disclose(battle_id));
        
        return some<BattleRewards>(BattleRewards {
            false,
            0,
            none<Field>()
        });
    } else if (result.enemy_hp_0 == 0 && result.enemy_hp_1 == 0 && result.enemy_hp_2 == 0) {
        // TODO: should you lose all abilities if you die?
        return_loadout(loadout);
        
        // TODO: properly determine rewards
        if (config.stats[0].boss_type != BOSS_TYPE.normal || (config.enemy_count >= 2 && config.stats[1].boss_type != BOSS_TYPE.normal) || (config.enemy_count >= 3 && config.stats[2].boss_type != BOSS_TYPE.normal)) {
            const reward_ability = random_ability(2);//quest.difficulty);

            player_abilities.lookup(player_pub_key).insert(reward_ability, (player_abilities.lookup(player_pub_key).lookup(reward_ability) + 1) as Uint<32>);
        }

        // TODO: when and how to generate?
        const reward = BattleRewards {
            true,
            100,
            none<Field>()
        };
        const player_stats = players.lookup(derive_player_pub_key(disclose(player_secret_key())));

        players.insert(derive_player_pub_key(disclose(player_secret_key())), add_player_rewards(player_stats, reward));
        active_battle_configs.remove(disclose(battle_id));
        active_battle_states.remove(disclose(battle_id));

        return some<BattleRewards>(reward);
    }
    return none<BattleRewards>();
}

pure circuit add_player_rewards(player: Player, reward: BattleRewards): Player {
    return Player {
        (player.gold + reward.gold) as Uint<32>
    };
}

circuit combat_round_impl(battle_id: Field, abilities: Vector<3, Ability>, target: Uint<32>): BattleState {
    const battle = active_battle_configs.lookup(battle_id);
    const old_state = active_battle_states.lookup(battle_id);

    // See generate.js for an explanation of the code generation

    // CODE-GENERATION START
    
    INSERT_ENEMY_BLOCK_CODE_HERE

    
    INSERT_PLAYER_BLOCK_CODE_HERE

    INSERT_PLAYER_DAMAGE_CODE_HERE


    const new_enemy_dmg_0 = enemy_block_0 < player_damage_0 ? (old_state.enemy_hp_0 + player_damage_0 - enemy_block_0) as Uint<32> : 0;
    const new_enemy_dmg_1 = enemy_block_1 < player_damage_1 ? (old_state.enemy_hp_1 + player_damage_1 - enemy_block_1) as Uint<32> : 0;
    const new_enemy_dmg_2 = enemy_block_2 < player_damage_2 ? (old_state.enemy_hp_2 + player_damage_2 - enemy_block_2) as Uint<32> : 0;


    INSERT_ENEMY_DAMAGE_CODE_HERE

    INSERT_DECK_INDEX_CALCULATION_CODE_HERE

    // CODE-GENERATION END

    return BattleState {
        INSERT_DECK_INDEX_BATTLE_STATE_INIT_CODE_HERE,
        player_block < enemy_damage ? (old_state.player_hp + enemy_damage - player_block) as Uint<32> : 0,
        new_enemy_dmg_0,
        new_enemy_dmg_1,
        new_enemy_dmg_2
    };
}

// total damage (after resistances) done by an effect to an enemy
export pure circuit effect_damage(effect: Effect, stats: EnemyStats): Uint<32> {
    return ((((effect.effect_type == EFFECT_TYPE.attack_phys) as Uint<1>) * (10 - stats.physical_def) * effect.amount + ((effect.effect_type == EFFECT_TYPE.attack_fire) as Uint<1>) * (10 - stats.fire_def) * (effect.amount)) + ((effect.effect_type == EFFECT_TYPE.attack_ice) as Uint<1>) * (10 - stats.ice_def) * effect.amount) as Uint<32>;
}
